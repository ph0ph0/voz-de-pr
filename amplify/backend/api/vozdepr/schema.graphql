type User
@model
@aws_api_key
@aws_cognito_user_pools
@auth(rules: [
  {
    allow: owner, 
    ownerField: "id", 
    operations: [create, read, update, delete]
  }
]) {
  id: ID!
  username: String!
  email: AWSEmail!
  avatar: S3Object!
  posts: [Post] @connection
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

#Post related objects

type Post
  @model
  @aws_api_key
  @aws_cognito_user_pools
  @auth(rules: [
      {
        allow: owner,
        operations: [create, update, delete]
      },
      {
        allow: public,
        operations: [read]
      }
  ]) 
  @key(
    name: "postsByUser",
    fields: ["createdBy"],
    queryField: "postsByUser"
  )
{
    id: ID!
    createdBy: ID
    createdAt: AWSDateTime
    author: String
    title: String!
    postContent: String!
    postImage: S3Object
    comments: [CommentOnPost] @connection
    votes: Int
}

type CommentOnPost
  @model
  @aws_api_key
  @aws_cognito_user_pools 
  @auth(rules: [
    {
      allow: owner, 
      operations: [create, update, delete]
    },
    {
      allow: public,
      operations: [read]
    }
  ]) 
{
  id: ID!
  createdBy: ID
  author: String
  createdAt: AWSDateTime
  text: String!
  votes: Int
  post: Post @connection
}

#Cause related objects

type Cause
  @model
  @aws_api_key
  @aws_cognito_user_pools
  @auth(rules: [
    {
      allow: owner, 
      operations: [create, update, delete]
    },
    {
        allow: public,
        operations: [read]
      }
  ]) 
  @key(
    name: "causesByUser",
    fields: ["createdBy"],
    queryField: "causesByUser"
  )
{
    id: ID!
    createdBy: ID
    createdAt: AWSDateTime
    author: String
    title: String!
    causeContent: String!
    location: String
    causeImage: S3Object
    comments: [CommentOnCause] @connection
    votes: Int
}



type CommentOnCause
  @model
  @aws_api_key
  @aws_cognito_user_pools
  @auth(rules: [
    {
      allow: owner,
      operations: [create, update, delete]
    },
    {
      allow: public,
      operations: [read]
    }
  ])  
{
  id: ID!
  createdBy: ID
  author: String
  createdAt: AWSDateTime
  text: String!
  votes: Int
  cause: Cause @connection
}

#Vote Type

type Vote
  @model
  @aws_api_key
  @aws_cognito_user_pools
  @auth(rules: [
    {
      allow: owner,
      operations: [create, update, delete]
    },
    {
      allow: public,
      operations: [read]
    }
  ])
  @key(
    name: "votesOnAnObjectByUser",
    fields: ["objectVotedOnId", "vote", "createdBy" ],
    queryField: "votesOnObjectByUser"
  )
{
  """
  id of vote = userId + post/comment/cause id + post/cause/postComment/causeComment
  ie id = 12233455_6786758_causeComment
  objectId is the id of the object being voted on.
  """
  id: ID!
  objectVotedOnId: ID!
  createdBy: ID
  createdAt: AWSDateTime
  vote: VoteType
  voteOn: VoteOnType
}

#Inputs and enums

input VoteInput {
  id: ID!
  vote: VoteType!
  voteOn: VoteOnType!

}

enum VoteType {
  up
  down
}

enum VoteOnType {
  post
  cause
  commentOnPost
  commentOnCause
}

#Rich Media

type S3Object {
  bucket: String!
  region: String!
  key: String!
}






